// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             (unknown)
// source: leaf-grpc/v1/snowflake.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLeafSnowflakeServiceDecodeSnowflakeId = "/leafgrpc.v1.LeafSnowflakeService/DecodeSnowflakeId"
const OperationLeafSnowflakeServiceGenSnowflakeId = "/leafgrpc.v1.LeafSnowflakeService/GenSnowflakeId"

type LeafSnowflakeServiceHTTPServer interface {
	DecodeSnowflakeId(context.Context, *DecodeSnowflakeIdReq) (*DecodeSnowflakeIdResp, error)
	GenSnowflakeId(context.Context, *IdRequest) (*IdReply, error)
}

func RegisterLeafSnowflakeServiceHTTPServer(s *http.Server, srv LeafSnowflakeServiceHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v2/snowflake/get", _LeafSnowflakeService_GenSnowflakeId0_HTTP_Handler(srv))
	r.GET("/api/snowflake/get", _LeafSnowflakeService_GenSnowflakeId1_HTTP_Handler(srv))
	r.GET("/decodeSnowflakeId", _LeafSnowflakeService_DecodeSnowflakeId0_HTTP_Handler(srv))
}

func _LeafSnowflakeService_GenSnowflakeId0_HTTP_Handler(srv LeafSnowflakeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeafSnowflakeServiceGenSnowflakeId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenSnowflakeId(ctx, req.(*IdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IdReply)
		return ctx.Result(200, reply)
	}
}

func _LeafSnowflakeService_GenSnowflakeId1_HTTP_Handler(srv LeafSnowflakeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeafSnowflakeServiceGenSnowflakeId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GenSnowflakeId(ctx, req.(*IdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IdReply)
		return ctx.Result(200, reply.Id)
	}
}

func _LeafSnowflakeService_DecodeSnowflakeId0_HTTP_Handler(srv LeafSnowflakeServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DecodeSnowflakeIdReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLeafSnowflakeServiceDecodeSnowflakeId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DecodeSnowflakeId(ctx, req.(*DecodeSnowflakeIdReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DecodeSnowflakeIdResp)
		return ctx.Result(200, reply)
	}
}

type LeafSnowflakeServiceHTTPClient interface {
	DecodeSnowflakeId(ctx context.Context, req *DecodeSnowflakeIdReq, opts ...http.CallOption) (rsp *DecodeSnowflakeIdResp, err error)
	GenSnowflakeId(ctx context.Context, req *IdRequest, opts ...http.CallOption) (rsp *IdReply, err error)
}

type LeafSnowflakeServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewLeafSnowflakeServiceHTTPClient(client *http.Client) LeafSnowflakeServiceHTTPClient {
	return &LeafSnowflakeServiceHTTPClientImpl{client}
}

func (c *LeafSnowflakeServiceHTTPClientImpl) DecodeSnowflakeId(ctx context.Context, in *DecodeSnowflakeIdReq, opts ...http.CallOption) (*DecodeSnowflakeIdResp, error) {
	var out DecodeSnowflakeIdResp
	pattern := "/decodeSnowflakeId"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeafSnowflakeServiceDecodeSnowflakeId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LeafSnowflakeServiceHTTPClientImpl) GenSnowflakeId(ctx context.Context, in *IdRequest, opts ...http.CallOption) (*IdReply, error) {
	var out IdReply
	pattern := "/api/snowflake/get"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLeafSnowflakeServiceGenSnowflakeId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out.Id, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
